-- -------------------------------------------------------------
-- 
-- File Name: /home/matt/OPV_TX_abraxas3d/create-even-and-odd-HDL/hdlsrc/opv_pluto_transmitter_HDL_coder_input/create_even_and_odd_tb.vhd
-- Created: 2024-04-20 21:29:42
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 6.00592e-11
-- Target subsystem base rate: 3.69004e-05
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: create_even_and_odd_tb
-- Source Path: 
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_textio.ALL;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY STD;
USE STD.textio.ALL;
USE work.create_even_and_odd_tb_pkg.ALL;

ENTITY create_even_and_odd_tb IS
END create_even_and_odd_tb;


ARCHITECTURE rtl OF create_even_and_odd_tb IS

  -- Component Declarations
  COMPONENT create_even_and_odd
    PORT( In1_0                           :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          In1_1                           :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          bo_bitstream                    :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          be_bitstream                    :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : create_even_and_odd
    USE ENTITY work.create_even_and_odd(rtl);

  -- Signals
  SIGNAL clk                              : std_logic;
  SIGNAL reset                            : std_logic;
  SIGNAL enb_1_614400_0                   : std_logic;
  SIGNAL be_bitstream_done                : std_logic;  -- ufix1
  SIGNAL rdEnb                            : std_logic;
  SIGNAL be_bitstream_done_enb            : std_logic;  -- ufix1
  SIGNAL bo_bitstream_addr                : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL be_bitstream_lastAddr            : std_logic;  -- ufix1
  SIGNAL resetn                           : std_logic;
  SIGNAL check2_done                      : std_logic;  -- ufix1
  SIGNAL bo_bitstream_done                : std_logic;  -- ufix1
  SIGNAL bo_bitstream_done_enb            : std_logic;  -- ufix1
  SIGNAL bo_bitstream_active              : std_logic;  -- ufix1
  SIGNAL snkDone                          : std_logic;
  SIGNAL snkDonen                         : std_logic;
  SIGNAL tb_enb                           : std_logic;
  SIGNAL tb_enb_delay                     : std_logic;
  SIGNAL ce_out                           : std_logic;
  SIGNAL bo_bitstream_enb                 : std_logic;  -- ufix1
  SIGNAL bo_bitstream_lastAddr            : std_logic;  -- ufix1
  SIGNAL check1_done                      : std_logic;  -- ufix1
  SIGNAL take_two_bits_at_a_time_out1_addr : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL take_two_bits_at_a_time_out1_active : std_logic;  -- ufix1
  SIGNAL take_two_bits_at_a_time_out1_enb : std_logic;  -- ufix1
  SIGNAL take_two_bits_at_a_time_out1_addr_delay_1 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL rawData_In1_0                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL holdData_In1_0                   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL rawData_In1_1                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL holdData_In1_1                   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL In1_0_offset                     : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL In1_0                            : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL In1_0_1                          : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL In1_1_offset                     : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL In1_1                            : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL In1_1_1                          : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL bo_bitstream                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL be_bitstream                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL bo_bitstream_signed              : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL bo_bitstream_addr_delay_1        : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL bo_bitstream_expected            : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL bo_bitstream_ref                 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL bo_bitstream_testFailure         : std_logic;  -- ufix1
  SIGNAL be_bitstream_signed              : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL be_bitstream_addr_delay_1        : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL be_bitstream_expected            : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL be_bitstream_ref                 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL be_bitstream_testFailure         : std_logic;  -- ufix1
  SIGNAL testFailure                      : std_logic;  -- ufix1

BEGIN
  u_create_even_and_odd : create_even_and_odd
    PORT MAP( In1_0 => In1_0_1,  -- ufix9
              In1_1 => In1_1_1,  -- ufix9
              bo_bitstream => bo_bitstream,  -- sfix16_En15
              be_bitstream => be_bitstream  -- sfix16_En15
              );

  be_bitstream_done_enb <= be_bitstream_done AND rdEnb;

  
  be_bitstream_lastAddr <= '1' WHEN bo_bitstream_addr >= to_unsigned(16#15#, 5) ELSE
      '0';

  be_bitstream_done <= be_bitstream_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_2_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check2_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF be_bitstream_done_enb = '1' THEN
        check2_done <= be_bitstream_done;
      END IF;
    END IF;
  END PROCESS checkDone_2_process;

  bo_bitstream_done_enb <= bo_bitstream_done AND rdEnb;

  
  bo_bitstream_active <= '1' WHEN bo_bitstream_addr /= to_unsigned(16#15#, 5) ELSE
      '0';

  enb_1_614400_0 <= rdEnb AFTER 2 ns;

  snkDonen <=  NOT snkDone;

  clk_gen: PROCESS 
  BEGIN
    clk <= '1';
    WAIT FOR 5 ns;
    clk <= '0';
    WAIT FOR 5 ns;
    IF snkDone = '1' THEN
      clk <= '1';
      WAIT FOR 5 ns;
      clk <= '0';
      WAIT FOR 5 ns;
      WAIT;
    END IF;
  END PROCESS clk_gen;

  reset_gen: PROCESS 
  BEGIN
    reset <= '1';
    WAIT FOR 20 ns;
    WAIT UNTIL clk'event AND clk = '1';
    WAIT FOR 2 ns;
    reset <= '0';
    WAIT;
  END PROCESS reset_gen;

  resetn <=  NOT reset;

  tb_enb <= resetn AND snkDonen;

  -- Delay inside enable generation: register depth 1
  u_enable_delay_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tb_enb_delay <= '0';
    ELSIF clk'event AND clk = '1' THEN
      tb_enb_delay <= tb_enb;
    END IF;
  END PROCESS u_enable_delay_process;

  
  rdEnb <= tb_enb_delay WHEN snkDone = '0' ELSE
      '0';

  ce_out <= enb_1_614400_0 AND (rdEnb AND tb_enb_delay);

  bo_bitstream_enb <= ce_out AND bo_bitstream_active;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 21
  c_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      bo_bitstream_addr <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF bo_bitstream_enb = '1' THEN
        IF bo_bitstream_addr >= to_unsigned(16#15#, 5) THEN 
          bo_bitstream_addr <= to_unsigned(16#00#, 5);
        ELSE 
          bo_bitstream_addr <= bo_bitstream_addr + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS c_3_process;


  
  bo_bitstream_lastAddr <= '1' WHEN bo_bitstream_addr >= to_unsigned(16#15#, 5) ELSE
      '0';

  bo_bitstream_done <= bo_bitstream_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check1_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF bo_bitstream_done_enb = '1' THEN
        check1_done <= bo_bitstream_done;
      END IF;
    END IF;
  END PROCESS checkDone_1_process;

  snkDone <= check1_done AND check2_done;

  
  take_two_bits_at_a_time_out1_active <= '1' WHEN take_two_bits_at_a_time_out1_addr /= to_unsigned(16#15#, 5) ELSE
      '0';

  take_two_bits_at_a_time_out1_enb <= take_two_bits_at_a_time_out1_active AND (rdEnb AND tb_enb_delay);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 21
  taketwobitsatatime_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      take_two_bits_at_a_time_out1_addr <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF take_two_bits_at_a_time_out1_enb = '1' THEN
        IF take_two_bits_at_a_time_out1_addr >= to_unsigned(16#15#, 5) THEN 
          take_two_bits_at_a_time_out1_addr <= to_unsigned(16#00#, 5);
        ELSE 
          take_two_bits_at_a_time_out1_addr <= take_two_bits_at_a_time_out1_addr + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS taketwobitsatatime_process;


  take_two_bits_at_a_time_out1_addr_delay_1 <= take_two_bits_at_a_time_out1_addr AFTER 1 ns;

  -- Data source for In1_0
  In1_0_fileread: PROCESS (take_two_bits_at_a_time_out1_addr_delay_1, tb_enb_delay, rdEnb)
    FILE fp: TEXT open READ_MODE is "In1_0.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(11 DOWNTO 0);

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    rawData_In1_0 <= unsigned(read_data(8 DOWNTO 0));
  END PROCESS In1_0_fileread;

  -- holdData reg for take_two_bits_at_a_time_out1
  stimuli_take_two_bits_at_a_time_out1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_In1_0 <= (OTHERS => 'X');
    ELSIF clk'event AND clk = '1' THEN
      holdData_In1_0 <= rawData_In1_0;
    END IF;
  END PROCESS stimuli_take_two_bits_at_a_time_out1_process;

  -- Data source for In1_1
  In1_1_fileread: PROCESS (take_two_bits_at_a_time_out1_addr_delay_1, tb_enb_delay, rdEnb)
    FILE fp: TEXT open READ_MODE is "In1_1.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(11 DOWNTO 0);

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    rawData_In1_1 <= unsigned(read_data(8 DOWNTO 0));
  END PROCESS In1_1_fileread;

  -- holdData reg for take_two_bits_at_a_time_out1
  stimuli_take_two_bits_at_a_time_out1_1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_In1_1 <= (OTHERS => 'X');
    ELSIF clk'event AND clk = '1' THEN
      holdData_In1_1 <= rawData_In1_1;
    END IF;
  END PROCESS stimuli_take_two_bits_at_a_time_out1_1_process;

  stimuli_take_two_bits_at_a_time_out1_2: PROCESS (rawData_In1_0, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      In1_0_offset <= holdData_In1_0;
    ELSE
      In1_0_offset <= rawData_In1_0;
    END IF;
  END PROCESS stimuli_take_two_bits_at_a_time_out1_2;

  In1_0 <= In1_0_offset AFTER 2 ns;

  In1_0_1 <= std_logic_vector(In1_0);

  stimuli_take_two_bits_at_a_time_out1_3: PROCESS (rawData_In1_1, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      In1_1_offset <= holdData_In1_1;
    ELSE
      In1_1_offset <= rawData_In1_1;
    END IF;
  END PROCESS stimuli_take_two_bits_at_a_time_out1_3;

  In1_1 <= In1_1_offset AFTER 2 ns;

  In1_1_1 <= std_logic_vector(In1_1);

  bo_bitstream_signed <= signed(bo_bitstream);

  bo_bitstream_addr_delay_1 <= bo_bitstream_addr AFTER 1 ns;

  -- Data source for bo_bitstream_expected
  bo_bitstream_expected_fileread: PROCESS (bo_bitstream_addr_delay_1, tb_enb_delay, rdEnb)
    FILE fp: TEXT open READ_MODE is "bo_bitstream_expected.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(15 DOWNTO 0);

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    bo_bitstream_expected <= signed(read_data(15 DOWNTO 0));
  END PROCESS bo_bitstream_expected_fileread;

  bo_bitstream_ref <= bo_bitstream_expected;

  bo_bitstream_signed_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      bo_bitstream_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND bo_bitstream_signed /= bo_bitstream_ref THEN
        bo_bitstream_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in bo_bitstream_signed: Expected " & to_hex(bo_bitstream_ref) & (" Actual " & to_hex(bo_bitstream_signed))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS bo_bitstream_signed_checker;

  be_bitstream_signed <= signed(be_bitstream);

  be_bitstream_addr_delay_1 <= bo_bitstream_addr AFTER 1 ns;

  -- Data source for be_bitstream_expected
  be_bitstream_expected_fileread: PROCESS (be_bitstream_addr_delay_1, tb_enb_delay, ce_out)
    FILE fp: TEXT open READ_MODE is "be_bitstream_expected.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(15 DOWNTO 0);

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF ce_out = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    be_bitstream_expected <= signed(read_data(15 DOWNTO 0));
  END PROCESS be_bitstream_expected_fileread;

  be_bitstream_ref <= be_bitstream_expected;

  be_bitstream_signed_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      be_bitstream_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND be_bitstream_signed /= be_bitstream_ref THEN
        be_bitstream_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in be_bitstream_signed: Expected " & to_hex(be_bitstream_ref) & (" Actual " & to_hex(be_bitstream_signed))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS be_bitstream_signed_checker;

  testFailure <= bo_bitstream_testFailure OR be_bitstream_testFailure;

  completed_msg: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF snkDone = '1' THEN
        IF testFailure = '0' THEN
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (PASSED)**************"
            SEVERITY NOTE;
        ELSE
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (FAILED)**************"
            SEVERITY NOTE;
        END IF;
      END IF;
    END IF;
  END PROCESS completed_msg;

END rtl;

