-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/opv_pluto_transmitter_HDL_coder_input/opv_modulator.vhd
-- Created: 2024-04-16 02:31:51
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 6.00592e-11
-- Target subsystem base rate: 1.6276e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1.6276e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- check_bo_t                    ce_out        1.6276e-08
-- tx_I                          ce_out        1.6276e-08
-- tx_q                          ce_out        1.6276e-08
-- check_be_t                    ce_out        1.6276e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: opv_modulator
-- Source Path: opv_pluto_transmitter_HDL_coder_input/opv_modulator
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY opv_modulator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        bo_t_bitstream                    :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        be_t_bitstream_delayed            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        ce_out                            :   OUT   std_logic;
        check_bo_t                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        tx_I                              :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        tx_q                              :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        check_be_t                        :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
        );
END opv_modulator;


ARCHITECTURE rtl OF opv_modulator IS

  -- Component Declarations
  COMPONENT alpha4_Tb
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_271_0                     :   IN    std_logic;
          validIn                         :   IN    std_logic;
          sine                            :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          cosine                          :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
          );
  END COMPONENT;

  COMPONENT carrier
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_271_0                     :   IN    std_logic;
          validIn                         :   IN    std_logic;
          sine                            :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          cosine                          :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : alpha4_Tb
    USE ENTITY work.alpha4_Tb(rtl);

  FOR ALL : carrier
    USE ENTITY work.carrier(rtl);

  -- Signals
  SIGNAL bo_t_bitstream_signed            : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL alpha1_4_Tb_sin                  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL alpha1_4_Tb_cos                  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL alpha1_4_Tb_sin_signed           : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Product10_mul_temp               : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Product10_out1                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Constant5_out1                   : std_logic;
  SIGNAL carrier_sin                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL carrier_cos                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL carrier_sin_signed               : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Product2_mul_temp                : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Product2_out1                    : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Product3_mul_temp                : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL bo_t_component                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL alpha1_4_Tb_cos_signed           : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL carrier_cos_signed               : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Product9_mul_temp                : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Product9_out1                    : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL be_t_bitstream_delayed_signed    : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Product8_mul_temp                : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL be_t_component                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Product11_mul_temp               : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Product11_out1                   : signed(15 DOWNTO 0);  -- sfix16_En15

BEGIN
  -- Even is Q
  -- Odd is I

  u_1_4_Tb : alpha4_Tb
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_271_0 => clk_enable,
              validIn => Constant_out1,
              sine => alpha1_4_Tb_sin,  -- sfix16_En15
              cosine => alpha1_4_Tb_cos  -- sfix16_En15
              );

  u_carrier : carrier
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_271_0 => clk_enable,
              validIn => Constant5_out1,
              sine => carrier_sin,  -- sfix16_En15
              cosine => carrier_cos  -- sfix16_En15
              );

  bo_t_bitstream_signed <= signed(bo_t_bitstream);

  Constant_out1 <= '1';

  alpha1_4_Tb_sin_signed <= signed(alpha1_4_Tb_sin);

  Product10_mul_temp <= bo_t_bitstream_signed * alpha1_4_Tb_sin_signed;
  Product10_out1 <= Product10_mul_temp(30 DOWNTO 15);

  check_bo_t <= std_logic_vector(Product10_out1);

  Constant5_out1 <= '1';

  carrier_sin_signed <= signed(carrier_sin);

  Product2_mul_temp <= alpha1_4_Tb_sin_signed * carrier_sin_signed;
  Product2_out1 <= Product2_mul_temp(30 DOWNTO 15);

  Product3_mul_temp <= bo_t_bitstream_signed * Product2_out1;
  bo_t_component <= Product3_mul_temp(30 DOWNTO 15);

  tx_I <= std_logic_vector(bo_t_component);

  alpha1_4_Tb_cos_signed <= signed(alpha1_4_Tb_cos);

  carrier_cos_signed <= signed(carrier_cos);

  Product9_mul_temp <= alpha1_4_Tb_cos_signed * carrier_cos_signed;
  Product9_out1 <= Product9_mul_temp(30 DOWNTO 15);

  be_t_bitstream_delayed_signed <= signed(be_t_bitstream_delayed);

  Product8_mul_temp <= Product9_out1 * be_t_bitstream_delayed_signed;
  be_t_component <= Product8_mul_temp(30 DOWNTO 15);

  tx_q <= std_logic_vector(be_t_component);

  Product11_mul_temp <= alpha1_4_Tb_cos_signed * be_t_bitstream_delayed_signed;
  Product11_out1 <= Product11_mul_temp(30 DOWNTO 15);

  check_be_t <= std_logic_vector(Product11_out1);

  ce_out <= clk_enable;

END rtl;

