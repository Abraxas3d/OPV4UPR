-- -------------------------------------------------------------
-- 
-- File Name: /home/matt/OPV_TX_abraxas3d/preamble-HDL/hdlsrc/opv_pluto_transmitter_HDL_coder_input/preamble_tb.vhd
-- Created: 2024-04-19 03:55:58
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 6.00592e-11
-- Target subsystem base rate: 1.84502e-05
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: preamble_tb
-- Source Path: 
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_textio.ALL;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY STD;
USE STD.textio.ALL;
USE work.preamble_tb_pkg.ALL;

ENTITY preamble_tb IS
END preamble_tb;


ARCHITECTURE rtl OF preamble_tb IS

  -- Component Declarations
  COMPONENT preamble
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          data                            :   IN    std_logic;
          PTT                             :   IN    std_logic;
          ce_out                          :   OUT   std_logic;
          Out1                            :   OUT   std_logic_vector(8 DOWNTO 0)  -- ufix9
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : preamble
    USE ENTITY work.preamble(rtl);

  -- Signals
  SIGNAL clk                              : std_logic;
  SIGNAL reset                            : std_logic;
  SIGNAL clk_enable                       : std_logic;
  SIGNAL Out1_done                        : std_logic;  -- ufix1
  SIGNAL rdEnb                            : std_logic;
  SIGNAL Out1_done_enb                    : std_logic;  -- ufix1
  SIGNAL Out1_addr                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Out1_active                      : std_logic;  -- ufix1
  SIGNAL data_addr                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL PTT_addr_delay_1                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL tb_enb_delay                     : std_logic;
  SIGNAL rawData_PTT                      : std_logic;
  SIGNAL holdData_PTT                     : std_logic;
  SIGNAL PTT_offset                       : std_logic;
  SIGNAL PTT                              : std_logic;
  SIGNAL data_active                      : std_logic;  -- ufix1
  SIGNAL data_enb                         : std_logic;  -- ufix1
  SIGNAL data_addr_delay_1                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL rawData_data                     : std_logic;
  SIGNAL holdData_data                    : std_logic;
  SIGNAL data_offset                      : std_logic;
  SIGNAL data                             : std_logic;
  SIGNAL check1_done                      : std_logic;  -- ufix1
  SIGNAL snkDonen                         : std_logic;
  SIGNAL resetn                           : std_logic;
  SIGNAL tb_enb                           : std_logic;
  SIGNAL ce_out                           : std_logic;
  SIGNAL Out1                             : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL Out1_enb                         : std_logic;  -- ufix1
  SIGNAL Out1_lastAddr                    : std_logic;  -- ufix1
  SIGNAL Out1_unsigned                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Out1_addr_delay_1                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Out1_expected                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Out1_ref                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Out1_testFailure                 : std_logic;  -- ufix1

BEGIN
  u_preamble : preamble
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              data => data,
              PTT => PTT,
              ce_out => ce_out,
              Out1 => Out1  -- ufix9
              );

  Out1_done_enb <= Out1_done AND rdEnb;

  
  Out1_active <= '1' WHEN Out1_addr /= to_unsigned(16#2B#, 6) ELSE
      '0';

  PTT_addr_delay_1 <= data_addr AFTER 1 ns;

  -- Data source for PTT
  PTT_fileread: PROCESS (PTT_addr_delay_1, tb_enb_delay, rdEnb)
    FILE fp: TEXT open READ_MODE is "PTT.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic;

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      READ(l, read_data);
    END IF;
    rawData_PTT <= read_data;
  END PROCESS PTT_fileread;

  -- holdData reg for PTT
  stimuli_PTT_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_PTT <= 'X';
    ELSIF clk'event AND clk = '1' THEN
      holdData_PTT <= rawData_PTT;
    END IF;
  END PROCESS stimuli_PTT_process;

  stimuli_PTT_1: PROCESS (rawData_PTT, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      PTT_offset <= holdData_PTT;
    ELSE
      PTT_offset <= rawData_PTT;
    END IF;
  END PROCESS stimuli_PTT_1;

  PTT <= PTT_offset AFTER 2 ns;

  
  data_active <= '1' WHEN data_addr /= to_unsigned(16#2B#, 6) ELSE
      '0';

  data_enb <= data_active AND (rdEnb AND tb_enb_delay);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 43
  Unbuffer2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      data_addr <= to_unsigned(16#00#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF data_enb = '1' THEN
        IF data_addr >= to_unsigned(16#2B#, 6) THEN 
          data_addr <= to_unsigned(16#00#, 6);
        ELSE 
          data_addr <= data_addr + to_unsigned(16#01#, 6);
        END IF;
      END IF;
    END IF;
  END PROCESS Unbuffer2_process;


  data_addr_delay_1 <= data_addr AFTER 1 ns;

  -- Data source for data
  data_fileread: PROCESS (data_addr_delay_1, tb_enb_delay, rdEnb)
    FILE fp: TEXT open READ_MODE is "data.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic;

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      READ(l, read_data);
    END IF;
    rawData_data <= read_data;
  END PROCESS data_fileread;

  -- holdData reg for data
  stimuli_data_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_data <= 'X';
    ELSIF clk'event AND clk = '1' THEN
      holdData_data <= rawData_data;
    END IF;
  END PROCESS stimuli_data_process;

  stimuli_data_1: PROCESS (rawData_data, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      data_offset <= holdData_data;
    ELSE
      data_offset <= rawData_data;
    END IF;
  END PROCESS stimuli_data_1;

  data <= data_offset AFTER 2 ns;

  snkDonen <=  NOT check1_done;

  resetn <=  NOT reset;

  tb_enb <= resetn AND snkDonen;

  -- Delay inside enable generation: register depth 1
  u_enable_delay_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tb_enb_delay <= '0';
    ELSIF clk'event AND clk = '1' THEN
      tb_enb_delay <= tb_enb;
    END IF;
  END PROCESS u_enable_delay_process;

  
  rdEnb <= tb_enb_delay WHEN check1_done = '0' ELSE
      '0';

  clk_enable <= rdEnb AFTER 2 ns;

  reset_gen: PROCESS 
  BEGIN
    reset <= '1';
    WAIT FOR 20 ns;
    WAIT UNTIL clk'event AND clk = '1';
    WAIT FOR 2 ns;
    reset <= '0';
    WAIT;
  END PROCESS reset_gen;

  clk_gen: PROCESS 
  BEGIN
    clk <= '1';
    WAIT FOR 5 ns;
    clk <= '0';
    WAIT FOR 5 ns;
    IF check1_done = '1' THEN
      clk <= '1';
      WAIT FOR 5 ns;
      clk <= '0';
      WAIT FOR 5 ns;
      WAIT;
    END IF;
  END PROCESS clk_gen;

  Out1_enb <= ce_out AND Out1_active;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 43
  c_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Out1_addr <= to_unsigned(16#00#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF Out1_enb = '1' THEN
        IF Out1_addr >= to_unsigned(16#2B#, 6) THEN 
          Out1_addr <= to_unsigned(16#00#, 6);
        ELSE 
          Out1_addr <= Out1_addr + to_unsigned(16#01#, 6);
        END IF;
      END IF;
    END IF;
  END PROCESS c_3_process;


  
  Out1_lastAddr <= '1' WHEN Out1_addr >= to_unsigned(16#2B#, 6) ELSE
      '0';

  Out1_done <= Out1_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check1_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF Out1_done_enb = '1' THEN
        check1_done <= Out1_done;
      END IF;
    END IF;
  END PROCESS checkDone_1_process;

  Out1_unsigned <= unsigned(Out1);

  Out1_addr_delay_1 <= Out1_addr AFTER 1 ns;

  -- Data source for Out1_expected
  Out1_expected_fileread: PROCESS (Out1_addr_delay_1, tb_enb_delay, ce_out)
    FILE fp: TEXT open READ_MODE is "Out1_expected.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(11 DOWNTO 0);

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF ce_out = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    Out1_expected <= unsigned(read_data(8 DOWNTO 0));
  END PROCESS Out1_expected_fileread;

  Out1_ref <= Out1_expected;

  Out1_unsigned_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Out1_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND Out1_unsigned /= Out1_ref THEN
        Out1_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in Out1_unsigned: Expected " & to_hex(Out1_ref) & (" Actual " & to_hex(Out1_unsigned))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS Out1_unsigned_checker;

  completed_msg: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF check1_done = '1' THEN
        IF Out1_testFailure = '0' THEN
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (PASSED)**************"
            SEVERITY NOTE;
        ELSE
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (FAILED)**************"
            SEVERITY NOTE;
        END IF;
      END IF;
    END IF;
  END PROCESS completed_msg;

END rtl;

