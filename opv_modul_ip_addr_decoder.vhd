-- -------------------------------------------------------------
-- 
-- File Name: /home/matt/OPV_TX_abraxas3d/preamble-HDL/hdlsrc/opv_pluto_transmitter_HDL_coder_input/opv_modul_ip_addr_decoder.vhd
-- Created: 2024-04-19 02:58:28
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: opv_modul_ip_addr_decoder
-- Source Path: opv_modul_ip/opv_modul_ip_axi4/opv_modul_ip_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY opv_modul_ip_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_cop_out_ready                :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        cop_reg_strobe                    :   IN    std_logic;  -- ufix1
        read_Out1                         :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        strobe_cop_in_strobe              :   OUT   std_logic;  -- ufix1
        write_data                        :   OUT   std_logic  -- ufix1
        );
END opv_modul_ip_addr_decoder;


ARCHITECTURE rtl OF opv_modul_ip_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_cop_out_ready_1_1     : std_logic;  -- ufix1
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL decode_sel_ip_timestamp_1_1      : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_cop_out_ready           : std_logic;  -- ufix1
  SIGNAL data_slice_cop_out_ready_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_cop_out_ready_1_1      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_Out1_unsigned               : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL decode_sel_Out1_1_1              : std_logic;  -- ufix1
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL sync_reg_Out1                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL data_slice_Out1_1                : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_Out1_1_1               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_enable_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable_1_1           : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_reg_axi_enable_1_1          : std_logic;  -- ufix1
  SIGNAL decode_sel_cop_in_strobe         : std_logic;  -- ufix1
  SIGNAL strobe_sel_cop_in_strobe         : std_logic;  -- ufix1
  SIGNAL const_zero                       : std_logic;  -- ufix1
  SIGNAL strobe_in_cop_in_strobe          : std_logic;  -- ufix1
  SIGNAL strobe_sw_cop_in_strobe          : std_logic;  -- ufix1
  SIGNAL strobe_reg_cop_in_strobe         : std_logic;  -- ufix1
  SIGNAL decode_sel_data_1_1              : std_logic;  -- ufix1
  SIGNAL reg_enb_data_1_1                 : std_logic;  -- ufix1
  SIGNAL data_in_data                     : std_logic;  -- ufix1
  SIGNAL data_reg_data_1_1                : std_logic;  -- ufix1

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_cop_out_ready_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0003#, 14) ELSE
      '0';

  const_1 <= '1';

  enb <= const_1;

  
  decode_sel_ip_timestamp_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0004#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  reg_cop_out_ready_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_cop_out_ready <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_cop_out_ready <= read_cop_out_ready;
      END IF;
    END IF;
  END PROCESS reg_cop_out_ready_process;


  data_slice_cop_out_ready_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_cop_out_ready;

  
  decode_rd_cop_out_ready_1_1 <= const_0 WHEN decode_sel_cop_out_ready_1_1 = '0' ELSE
      data_slice_cop_out_ready_1;

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  read_Out1_unsigned <= unsigned(read_Out1);

  
  decode_sel_Out1_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  reg_ip_timestamp_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_ip_timestamp <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp_1_1 <= decode_rd_cop_out_ready_1_1 WHEN decode_sel_ip_timestamp_1_1 = '0' ELSE
      read_reg_ip_timestamp;

  reg_Out1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sync_reg_Out1 <= to_unsigned(16#000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND cop_reg_strobe = '1' THEN
        sync_reg_Out1 <= read_Out1_unsigned;
      END IF;
    END IF;
  END PROCESS reg_Out1_process;


  data_slice_Out1_1 <= resize(sync_reg_Out1, 32);

  
  decode_rd_Out1_1_1 <= decode_rd_ip_timestamp_1_1 WHEN decode_sel_Out1_1_1 = '0' ELSE
      data_slice_Out1_1;

  data_read <= std_logic_vector(decode_rd_Out1_1_1);

  
  decode_sel_axi_enable_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable_1_1 <= decode_sel_axi_enable_1_1 AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  reg_axi_enable_1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      data_reg_axi_enable_1_1 <= '1';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_axi_enable_1_1 = '1' THEN
        data_reg_axi_enable_1_1 <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_1_1_process;


  
  decode_sel_cop_in_strobe <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  strobe_sel_cop_in_strobe <= decode_sel_cop_in_strobe AND wr_enb;

  const_zero <= '0';

  strobe_in_cop_in_strobe <= data_write_unsigned(0);

  
  strobe_sw_cop_in_strobe <= const_zero WHEN strobe_sel_cop_in_strobe = '0' ELSE
      strobe_in_cop_in_strobe;

  reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      strobe_reg_cop_in_strobe <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        strobe_reg_cop_in_strobe <= strobe_sw_cop_in_strobe;
      END IF;
    END IF;
  END PROCESS reg_process;


  
  decode_sel_data_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_data_1_1 <= decode_sel_data_1_1 AND wr_enb;

  data_in_data <= data_write_unsigned(0);

  reg_data_1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      data_reg_data_1_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_data_1_1 = '1' THEN
        data_reg_data_1_1 <= data_in_data;
      END IF;
    END IF;
  END PROCESS reg_data_1_1_process;


  write_axi_enable <= data_reg_axi_enable_1_1;

  strobe_cop_in_strobe <= strobe_reg_cop_in_strobe;

  write_data <= data_reg_data_1_1;

END rtl;

